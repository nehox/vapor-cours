@testable import App
import XCTVapor

/**
 * AppTests.swift - Tests principaux de l'application
 * 
 * Ce fichier contient les tests de base pour v√©rifier que l'application
 * fonctionne correctement. Les tests sont essentiels pour :
 * - V√©rifier que le code fonctionne comme attendu
 * - √âviter les r√©gressions lors des modifications
 * - Documenter le comportement attendu
 */

final class AppTests: XCTestCase {
    
    // Instance de l'application pour les tests
    var app: Application!
    
    /**
     * Configuration avant chaque test
     * 
     * Cette m√©thode est appel√©e avant chaque test individual.
     * Elle configure une instance propre de l'application.
     */
    override func setUp() async throws {
        // Cr√©ation de l'application en mode test
        app = Application(.testing)
        
        // Configuration de l'application (DB, routes, etc.)
        try await configure(app)
        
        // Application des migrations pour cr√©er les tables
        try await app.autoMigrate()
    }
    
    /**
     * Nettoyage apr√®s chaque test
     * 
     * Cette m√©thode est appel√©e apr√®s chaque test pour nettoyer
     * les ressources et √©viter les fuites m√©moire.
     */
    override func tearDown() async throws {
        // Annulation des migrations (suppression des tables)
        try await app.autoRevert()
        
        // Arr√™t propre de l'application
        app.shutdown()
    }
    
    // MARK: - Tests des routes de base
    
    /**
     * Test de la route d'accueil
     * 
     * V√©rifie que GET / retourne bien le message de bienvenue
     */
    func testHomePage() async throws {
        try await app.test(.GET, "/") { req in
            // Pas de configuration sp√©ciale pour cette requ√™te
        } afterResponse: { res in
            // V√©rification du code de statut
            XCTAssertEqual(res.status, .ok)
            
            // V√©rification du contenu JSON
            let response = try res.content.decode([String: AnyCodable].self)
            XCTAssertEqual(response["message"]?.value as? String, 
                          "üéØ Bienvenue sur l'API de gestion des t√¢ches !")
        }
    }
    
    /**
     * Test de la route hello
     * 
     * V√©rifie que GET /hello retourne le bon message
     */
    func testHello() async throws {
        try await app.test(.GET, "/hello") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            XCTAssertEqual(res.body.string, 
                          "üëã Salut depuis Vapor ! L'API fonctionne parfaitement.")
        }
    }
    
    /**
     * Test de la route hello avec nom
     * 
     * V√©rifie que GET /hello/:name personnalise le message
     */
    func testHelloWithName() async throws {
        try await app.test(.GET, "/hello/Etudiant") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            XCTAssertEqual(res.body.string, 
                          "üëã Salut Etudiant ! Bienvenue sur notre API Vapor.")
        }
    }
    
    /**
     * Test de la route de sant√©
     * 
     * V√©rifie que GET /health retourne les informations de sant√©
     */
    func testHealthCheck() async throws {
        try await app.test(.GET, "/health") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            
            let health = try res.content.decode([String: AnyCodable].self)
            XCTAssertEqual(health["status"]?.value as? String, "healthy")
            XCTAssertEqual(health["version"]?.value as? String, "1.0.0")
        }
    }
    
    // MARK: - Tests des op√©rations CRUD sur les t√¢ches
    
    /**
     * Test de cr√©ation d'une t√¢che
     * 
     * V√©rifie que POST /tasks cr√©e bien une nouvelle t√¢che
     */
    func testCreateTask() async throws {
        let taskData = ["title": "T√¢che de test", "isCompleted": false] as [String : Any]
        
        try await app.test(.POST, "/tasks") { req in
            req.headers.contentType = .json
            try req.content.encode(taskData)
        } afterResponse: { res in
            // V√©rification du statut de cr√©ation r√©ussie
            XCTAssertEqual(res.status, .ok)
            
            // V√©rification des donn√©es de la t√¢che cr√©√©e
            let task = try res.content.decode(Task.self)
            XCTAssertEqual(task.title, "T√¢che de test")
            XCTAssertFalse(task.isCompleted)
            XCTAssertNotNil(task.id)
            XCTAssertNotNil(task.createdAt)
        }
    }
    
    /**
     * Test de validation lors de la cr√©ation
     * 
     * V√©rifie que la validation emp√™che la cr√©ation de t√¢ches invalides
     */
    func testCreateTaskValidation() async throws {
        let invalidTaskData = ["title": "", "isCompleted": false] as [String : Any]
        
        try await app.test(.POST, "/tasks") { req in
            req.headers.contentType = .json
            try req.content.encode(invalidTaskData)
        } afterResponse: { res in
            // Doit retourner une erreur de validation
            XCTAssertEqual(res.status, .badRequest)
        }
    }
    
    /**
     * Test de r√©cup√©ration de toutes les t√¢ches
     * 
     * V√©rifie que GET /tasks retourne la liste des t√¢ches
     */
    func testGetAllTasks() async throws {
        // Cr√©ation de t√¢ches de test
        let task1 = Task(title: "Premi√®re t√¢che", isCompleted: false)
        let task2 = Task(title: "Deuxi√®me t√¢che", isCompleted: true)
        
        try await task1.save(on: app.db)
        try await task2.save(on: app.db)
        
        try await app.test(.GET, "/tasks") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            
            let tasks = try res.content.decode([Task].self)
            XCTAssertEqual(tasks.count, 2)
            
            // V√©rification que nos t√¢ches sont pr√©sentes
            let titles = tasks.map { $0.title }
            XCTAssertTrue(titles.contains("Premi√®re t√¢che"))
            XCTAssertTrue(titles.contains("Deuxi√®me t√¢che"))
        }
    }
    
    /**
     * Test de r√©cup√©ration d'une t√¢che sp√©cifique
     * 
     * V√©rifie que GET /tasks/:id retourne la bonne t√¢che
     */
    func testGetSpecificTask() async throws {
        // Cr√©ation d'une t√¢che de test
        let task = Task(title: "T√¢che sp√©cifique", isCompleted: false)
        try await task.save(on: app.db)
        
        guard let taskId = task.id?.uuidString else {
            XCTFail("La t√¢che devrait avoir un ID")
            return
        }
        
        try await app.test(.GET, "/tasks/\(taskId)") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            
            let retrievedTask = try res.content.decode(Task.self)
            XCTAssertEqual(retrievedTask.title, "T√¢che sp√©cifique")
            XCTAssertFalse(retrievedTask.isCompleted)
            XCTAssertEqual(retrievedTask.id, task.id)
        }
    }
    
    /**
     * Test de r√©cup√©ration d'une t√¢che inexistante
     * 
     * V√©rifie que GET /tasks/:id retourne 404 pour un ID inexistant
     */
    func testGetNonExistentTask() async throws {
        let fakeId = UUID().uuidString
        
        try await app.test(.GET, "/tasks/\(fakeId)") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .notFound)
        }
    }
    
    /**
     * Test de modification d'une t√¢che
     * 
     * V√©rifie que PUT /tasks/:id modifie correctement une t√¢che
     */
    func testUpdateTask() async throws {
        // Cr√©ation d'une t√¢che de test
        let task = Task(title: "T√¢che √† modifier", isCompleted: false)
        try await task.save(on: app.db)
        
        guard let taskId = task.id?.uuidString else {
            XCTFail("La t√¢che devrait avoir un ID")
            return
        }
        
        let updateData = ["title": "T√¢che modifi√©e", "isCompleted": true] as [String : Any]
        
        try await app.test(.PUT, "/tasks/\(taskId)") { req in
            req.headers.contentType = .json
            try req.content.encode(updateData)
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            
            let updatedTask = try res.content.decode(Task.self)
            XCTAssertEqual(updatedTask.title, "T√¢che modifi√©e")
            XCTAssertTrue(updatedTask.isCompleted)
            XCTAssertEqual(updatedTask.id, task.id)
        }
    }
    
    /**
     * Test de suppression d'une t√¢che
     * 
     * V√©rifie que DELETE /tasks/:id supprime correctement une t√¢che
     */
    func testDeleteTask() async throws {
        // Cr√©ation d'une t√¢che de test
        let task = Task(title: "T√¢che √† supprimer", isCompleted: false)
        try await task.save(on: app.db)
        
        guard let taskId = task.id?.uuidString else {
            XCTFail("La t√¢che devrait avoir un ID")
            return
        }
        
        try await app.test(.DELETE, "/tasks/\(taskId)") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .noContent)
        }
        
        // V√©rification que la t√¢che a bien √©t√© supprim√©e
        try await app.test(.GET, "/tasks/\(taskId)") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .notFound)
        }
    }
    
    /**
     * Test de r√©cup√©ration des t√¢ches en attente
     * 
     * V√©rifie que GET /tasks/pending retourne seulement les t√¢ches non termin√©es
     */
    func testGetPendingTasks() async throws {
        // Cr√©ation de t√¢ches de test
        let pendingTask = Task(title: "T√¢che en attente", isCompleted: false)
        let completedTask = Task(title: "T√¢che termin√©e", isCompleted: true)
        
        try await pendingTask.save(on: app.db)
        try await completedTask.save(on: app.db)
        
        try await app.test(.GET, "/tasks/pending") { req in
        } afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
            
            let tasks = try res.content.decode([Task].self)
            
            // Doit retourner seulement la t√¢che en attente
            XCTAssertEqual(tasks.count, 1)
            XCTAssertEqual(tasks[0].title, "T√¢che en attente")
            XCTAssertFalse(tasks[0].isCompleted)
        }
    }
}

// MARK: - Extensions utilitaires pour les tests

/**
 * Extension pour faciliter le d√©codage de r√©ponses mixtes
 */
struct AnyCodable: Codable {
    let value: Any
    
    init<T>(_ value: T?) {
        self.value = value ?? ()
    }
}

extension AnyCodable {
    init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if let intValue = try? container.decode(Int.self) {
            value = intValue
        } else if let doubleValue = try? container.decode(Double.self) {
            value = doubleValue
        } else if let stringValue = try? container.decode(String.self) {
            value = stringValue
        } else if let boolValue = try? container.decode(Bool.self) {
            value = boolValue
        } else if let arrayValue = try? container.decode([AnyCodable].self) {
            value = arrayValue.map { $0.value }
        } else if let dictValue = try? container.decode([String: AnyCodable].self) {
            value = dictValue.mapValues { $0.value }
        } else {
            value = ()
        }
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        
        switch value {
        case let intValue as Int:
            try container.encode(intValue)
        case let doubleValue as Double:
            try container.encode(doubleValue)
        case let stringValue as String:
            try container.encode(stringValue)
        case let boolValue as Bool:
            try container.encode(boolValue)
        default:
            try container.encodeNil()
        }
    }
}

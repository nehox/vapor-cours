#!/bin/bash

# ===========================
# üöÄ Script de d√©marrage pour l'API Vapor
# ===========================

set -e  # Arr√™t en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banner
echo "=================================="
echo "üéØ API de Gestion des T√¢ches"
echo "   Swift + Vapor"
echo "=================================="
echo ""

# V√©rification des pr√©requis
print_status "V√©rification des pr√©requis..."

# V√©rifier Swift
if ! command -v swift &> /dev/null; then
    print_error "Swift n'est pas install√©. Veuillez installer Swift depuis https://swift.org"
    exit 1
fi

SWIFT_VERSION=$(swift --version | head -n1)
print_success "Swift trouv√©: $SWIFT_VERSION"

# V√©rifier la structure du projet
if [ ! -f "Package.swift" ]; then
    print_error "Package.swift non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
    exit 1
fi

print_success "Structure du projet valid√©e"

# Configuration de l'environnement
print_status "Configuration de l'environnement..."

# Copier le fichier d'environnement si n√©cessaire
if [ ! -f ".env" ] && [ -f ".env.example" ]; then
    print_status "Cr√©ation du fichier .env depuis .env.example"
    cp .env.example .env
fi

# R√©solution des d√©pendances
print_status "R√©solution des d√©pendances Swift Package Manager..."
if swift package resolve; then
    print_success "D√©pendances r√©solues avec succ√®s"
else
    print_error "√âchec de la r√©solution des d√©pendances"
    exit 1
fi

# Compilation
print_status "Compilation du projet..."
if swift build; then
    print_success "Compilation r√©ussie"
else
    print_error "√âchec de la compilation"
    exit 1
fi

# Fonction pour arr√™ter proprement l'application
cleanup() {
    print_warning "Arr√™t de l'application..."
    exit 0
}

# Capture des signaux pour un arr√™t propre
trap cleanup SIGINT SIGTERM

# D√©marrage de l'application
print_status "D√©marrage de l'API..."
print_status "L'API sera disponible sur http://localhost:8080"
print_warning "Appuyez sur Ctrl+C pour arr√™ter le serveur"
echo ""

# Petite pause pour que l'utilisateur puisse lire les messages
sleep 2

# D√©marrage
swift run App serve --hostname 0.0.0.0 --port 8080
